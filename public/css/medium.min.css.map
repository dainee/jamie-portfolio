{"version":3,"sources":["../../source/assets/css/_partials/header/_header-medium.scss","../../source/assets/css/_partials/_global/_mixins.scss","../../source/assets/css/_partials/footer/_footer-medium.scss"],"names":[],"mappings":"AAEA;EAGG,eCWiD,EDVjD;;AAJH;EAUG,cAAa,EACb;;AAXH;EAeE,eAAc,EACd;;AEhBF;EACC,oBAAuB,EAevB;EAbA;IACC,6BAAQ;QAAR,kBAAQ;YAAR,SAAQ;IACR,iBAAgB,EAChB;EAED;IACC,6BAAQ;QAAR,kBAAQ;YAAR,SAAQ;IACR,kBAAiB,EAKjB;IAPA;MAKC,sBDCiD,ECAjD","file":"medium.min.css","sourcesContent":["$block: 'header';\n\n.#{$block} {\n\t.navbar-brand {\n\t\timg {\n\t\t\twidth: rem-calc(100);\n\t\t}\n\t}\n\n\t.navbar-toggler {\n\t\t&[aria-expanded='true'],\n\t\t&[aria-expanded='false'] {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\n\t.nav-link {\n\t\tmargin-left: 0;\n\t}\n}\n","// Remove the unit of a length - https://css-tricks.com/snippets/sass/strip-unit-function/\n// @param {Number} $number - Number to remove unit from\n// @return {Number} - Unitless number\n@function strip-unit($number) {\n\t@if type-of($number) == 'number' and not unitless($number) {\n\t\t@return $number / ($number * 0 + 1);\n\t}\n\n\t@return $number;\n}\n\n// Convert from pixels to rems\n// @param {Number} $value - Value in pixels (can be unitless, px is assumeed) to be converted\n// @param {Number} $base - Optional. The base font-size to use (16px is default)\n// @return {Number} - Value in rems\n@function rem-calc($value, $base: 16px) {\n\t@return ((strip-unit($value) * 1px) / $base) * 1rem;\n}\n\n// Exponent function - https://css-tricks.com/snippets/sass/power-function/\n// @param {Number} $number - The base\n// @param {Number} $exponent - The exponent (integers only)\n// @return {Number} - the evaluated result\n@function pow($number, $exponent) {\n\t$value: 1;\n\n\t@if $exponent > 0 {\n\t\t@for $i from 1 through $exponent {\n\t\t\t$value: $value * $number;\n\t\t}\n\t} @else if $exponent < 0 {\n\t\t@for $i from 1 through -$exponent {\n\t\t\t$value: $value / $number;\n\t\t}\n\t}\n\n\t@return $value;\n}\n\n// Replaces instances of a string with another string - http://www.sassmeister.com/gist/1b4f2da5527830088e4d)\n// @param {String} $string - the string that has things being replaced in\n// @param {String} $search - the string to be replaced\n// @param {String} $replace - Optional. The string that will be inserted instead of $search. Defaults to nothing (just removes $search)\n// @return {String} - The string with the $search substrings replaced with $replace\n@function str-replace($string, $search, $replace: '') {\n\t$index: str-index($string, $search);\n\t@if $index {\n\t\t@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n\t}\n\t@return $string;\n}\n\n// Shortcut to get font-size from map without writing out map-get\n// @param {String} $key - the name of the font-size in the map in _global/_variables\n// @return {Number} - The value of the font-size from the map in _global/_variables\n@function fs($key) {\n\t@if map-has-key($font-sizes, $key) {\n\t\t@return map-get($font-sizes, $key);\n\t}\n\n\t@warn 'Unknown \"#{$key}\" in map.';\n\t@return null;\n}\n\n// Shortcut to get PRIMARY font-weight from map without writing out map-get\n// @param {String} $key - the name of the font-weight in the map in _global/_variables\n// @return {Number} - The value of the font-weight from the map in _global/_variables\n@function fwp($key) {\n\t@if map-has-key($font-weights-primary, $key) {\n\t\t@return map-get($font-weights-primary, $key);\n\t}\n\n\t@warn 'Unknown \"#{$key}\" in map.';\n\t@return null;\n}\n\n// Shortcut to get SECONDARY font-weight from map without writing out map-get\n// @param {String} $key - the name of the font-weight in the map in _global/_variables\n// @return {Number} - The value of the font-weight from the map in _global/_variables\n@function fws($key) {\n\t@if map-has-key($font-weights-secondary, $key) {\n\t\t@return map-get($font-weights-secondary, $key);\n\t}\n\n\t@warn 'Unknown \"#{$key}\" in map.';\n\t@return null;\n}\n\n// Convert from rems to px\n// @param {Number} $value - Value in rems (can be unitless, rem is assumed) to be converted\n// @param {Number} $base - Optional. The base font-size to use (16px is default)\n// @return {Number} - Value in pixels\n@function un-rem-calc($value, $base: 16px) {\n    @return strip-unit($value) * $base;\n}\n\n// URL-encodes a string https://codepen.io/kevinweber/pen/dXWoRw\n// @param {String} $str - the string to be encoded\n// @return {String} - the encoded string\n@function url-encode($str) {\n\t$encoding-reference: (\n\t\t//('%', '%25'),  // Encode \"%\" first, otherwise the \"%\" from encoded code would be encoded again (which would be bad)\n\t\t('<', '%3C'),\n\t\t('>', '%3E'),\n\t\t//('\"', '%22'),  // Replace \" with ' because that's shorter than %22 and normally working\n\t\t('\"', '\\''),\n\t\t('#', '%23'),\n\t\t('&', '%26'),\n\t\t// Here are a few more characters you could encode\n\t\t//(' ', '%20'),\n\t\t//('!', '%21'),\n\t\t//('$', '%24'),\n\t\t//(',', '%27'),\n\t\t//('(', '%28'),\n\t\t//(')', '%29'),\n\t\t//('*', '%2A'),\n\t\t//('+', '%2B'),\n\t\t//('\"', '%2C'),\n\t\t//('/', '%2F'),\n\t\t//(':', '%3A'),\n\t\t//(';', '%3B'),\n\t\t//('=', '%3D'),\n\t\t//('?', '%3F'),\n\t\t//('@', '%40'),\n\t\t//('[', '%5B'),\n\t\t//(']', '%5D'),\n\t\t//('^', '%5E'),\n\t\t//('`', '%60'),\n\t\t//('{', '%7B'),\n\t\t//('|', '%7C'),\n\t\t//('}', '%7D'),\n\t\t//('~', '%7E'),\n\t\t//(',', '%E2%80%9A'),\n\t\t//('\\\\', '%5C'),\n\t\t//('_', '%5F'),\n\t\t//('-', '%2D'),\n\t\t//('.', '%2E'),\n\t\t// ('\\', '%5C'),\n\t\t// (' ', '%7F'),\n\t\t// ('`', '%E2%82%AC'),\n\t\t//('ƒ', '%C6%92'),\n\t\t//('„', '%E2%80%9E'),\n\t\t//('…', '%E2%80%A6'),\n\t\t//('†', '%E2%80%A0'),\n\t\t//('‡', '%E2%80%A1'),\n\t\t//('ˆ', '%CB%86'),\n\t\t//('‰', '%E2%80%B0'),\n\t\t//('Š', '%C5%A0'),\n\t\t//('‹', '%E2%80%B9'),\n\t\t//('Œ', '%C5%92'),\n\t\t//('', '%C5%8D'),\n\t\t//('Ž', '%C5%BD'),\n\t\t//('', '%8F'),\n\t\t//('', '%C2%90'),\n\t\t//(', '%'E2%80%98'),\n\t\t//(', '%'E2%80%99'),\n\t\t//('“', '%E2%80%9C'),\n\t\t//('”', '%E2%80%9D'),\n\t\t//('•', '%E2%80%A2'),\n\t\t//('–', '%E2%80%93'),\n\t\t//('—', '%E2%80%94'),\n\t\t//('˜', '%CB%9C'),\n\t\t//('™', '%E2%84'),\n\t\t//('š', '%C5%A1'),\n\t\t//('›', '%E2%80'),\n\t\t//('œ', '%C5%93'),\n\t\t//('', '%9D'),\n\t\t//('ž', '%C5%BE'),\n\t\t//('Ÿ', '%C5%B8'),\n\t\t//(' ', '%C2%A0'),\n\t\t//('¡', '%C2%A1'),\n\t\t//('¢', '%C2%A2'),\n\t\t//('£', '%C2%A3'),\n\t\t//('¤', '%C2%A4'),\n\t\t//('¥', '%C2%A5'),\n\t\t//('¦', '%C2%A6'),\n\t\t//('§', '%C2%A7'),\n\t\t//('¨', '%C2%A8'),\n\t\t//('©', '%C2%A9'),\n\t\t//('ª', '%C2%AA'),\n\t\t//('«', '%C2%AB'),\n\t\t//('¬', '%C2%AC'),\n\t\t//(', '%'C2%AD'),\n\t\t//('®', '%C2%AE'),\n\t\t//('¯', '%C2%AF'),\n\t\t//('°', '%C2%B0'),\n\t\t//('±', '%C2%B1'),\n\t\t//('²', '%C2%B2'),\n\t\t//('³', '%C2%B3'),\n\t\t//('´', '%C2%B4'),\n\t\t//('µ', '%C2%B5'),\n\t\t//('¶', '%C2%B6'),\n\t\t//('·', '%C2%B7'),\n\t\t//('¸', '%C2%B8'),\n\t\t//('¹', '%C2%B9'),\n\t\t//('º', '%C2%BA'),\n\t\t//('»', '%C2%BB'),\n\t\t//('¼', '%C2%BC'),\n\t\t//('½', '%C2%BD'),\n\t\t//('¾', '%C2%BE'),\n\t\t//('¿', '%C2%BF'),\n\t\t//('À', '%C3%80'),\n\t\t//('Á', '%C3%81'),\n\t\t//('Â', '%C3%82'),\n\t\t//('Ã', '%C3%83'),\n\t\t//('Ä', '%C3%84'),\n\t\t//('Å', '%C3%85'),\n\t\t//('Æ', '%C3%86'),\n\t\t//('Ç', '%C3%87'),\n\t\t//('È', '%C3%88'),\n\t\t//('É', '%C3%89'),\n\t\t//('Ê', '%C3%8A'),\n\t\t//('Ë', '%C3%8B'),\n\t\t//('Ì', '%C3%8C'),\n\t\t//('Í', '%C3%8D'),\n\t\t//('Î', '%C3%8E'),\n\t\t//('Ï', '%C3%8F'),\n\t\t//('Ð', '%C3%90'),\n\t\t//('Ñ', '%C3%91'),\n\t\t//('Ò', '%C3%92'),\n\t\t//('Ó', '%C3%93'),\n\t\t//('Ô', '%C3%94'),\n\t\t//('Õ', '%C3%95'),\n\t\t//('Ö', '%C3%96'),\n\t\t//('×', '%C3%97'),\n\t\t//('Ø', '%C3%98'),\n\t\t//('Ù', '%C3%99'),\n\t\t//('Ú', '%C3%9A'),\n\t\t//('Û', '%C3%9B'),\n\t\t//('Ü', '%C3%9C'),\n\t\t//('Ý', '%C3%9D'),\n\t\t//('Þ', '%C3%9E'),\n\t\t//('ß', '%C3%9F'),\n\t\t//('à', '%C3%A0'),\n\t\t//('á', '%C3%A1'),\n\t\t//('â', '%C3%A2'),\n\t\t//('ã', '%C3%A3'),\n\t\t//('ä', '%C3%A4'),\n\t\t//('å', '%C3%A5'),\n\t\t//('æ', '%C3%A6'),\n\t\t//('ç', '%C3%A7'),\n\t\t//('è', '%C3%A8'),\n\t\t//('é', '%C3%A9'),\n\t\t//('ê', '%C3%AA'),\n\t\t//('ë', '%C3%AB'),\n\t\t//('ì', '%C3%AC'),\n\t\t//('í', '%C3%AD'),\n\t\t//('î', '%C3%AE'),\n\t\t//('ï', '%C3%AF'),\n\t\t//('ð', '%C3%B0'),\n\t\t//('ñ', '%C3%B1'),\n\t\t//('ò', '%C3%B2'),\n\t\t//('ó', '%C3%B3'),\n\t\t//('ô', '%C3%B4'),\n\t\t//('õ', '%C3%B5'),\n\t\t//('ö', '%C3%B6'),\n\t\t//('÷', '%C3%B7'),\n\t\t//('ø', '%C3%B8'),\n\t\t//('ù', '%C3%B9'),\n\t\t//('ú', '%C3%BA'),\n\t\t//('û', '%C3%BB'),\n\t\t//('ü', '%C3%BC'),\n\t\t//('ý', '%C3%BD'),\n\t\t//('þ', '%C3%BE'),\n\t\t//('ÿ', '%C3%BF')\n\t);\n\t@each $char, $encoded in $encoding-reference {\n\t\t$str: str-replace($str, $char, $encoded);\n\t}\n\t@return $str;\n}\n\n@mixin no-custom-bullets {\n\tmargin-left: initial;\n\ttext-indent: initial;\n\n\tli {\n\t\t&:before {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n}\n\n// For the object-fit-images polyfill (https://www.npmjs.com/package/object-fit-images)\n// To use, add @include object-fit(); to the classes/selectors that need a polyfill\n// To adjust the position, add the fit & position parameters, i.e. @include object-fit(contain, center);\n// TODO: Remove the object-fit mixin if not needed\n@mixin object-fit($fit: cover, $position: null) {\n\tobject-fit: $fit;\n\n\t@if( $position ) {\n\t\tfont-family: 'object-fit: #{$fit}; object-position: #{$position}';\n\t\tobject-position: $position;\n\t} @else {\n\t\tfont-family: 'object-fit: #{$fit}';\n\t}\n}\n","$block: 'footer';\n\n.#{$block} {\n\tpadding: rem-calc(30) 0;\n\n\t&__license {\n\t\torder: 1;\n\t\ttext-align: left;\n\t}\n\n\t&__social {\n\t\torder: 2;\n\t\ttext-align: right;\n\n\t\ta {\n\t\t\tmargin-right: rem-calc(20);\n\t\t}\n\t}\n}\n"]}